@use "sass:math";

@use "./shared" as s;
//@use "shared";
// @import carrega a variaveis/funções no escopo global
// @use carrega em escopo nomeado (namespace)

// 1. @Mixins
// ** Sass gera o CSS no momento da build — mixins e functions não exitem no fluxo de cascata,
// ** eles são apenas copiados e colados em cada lugar onde é usado.

// 1.1 Variantes
#ex1 {
  @mixin btn($background, $color: #fff, $radius: 0.5rem) {
    color: $color;
    border: none;
    background: $background;
    border-radius: $radius;
    padding: 0.5rem 1rem;
    font-weight: 500;
    cursor: pointer;
  }

  .btn-primary {
    @include btn(greenyellow);
  }

  .btn-secondary {
    @include btn(darkkhaki, purple, 0.25rem);
  }
}

// 1.2 @content
#ex2 {
  @mixin media($min: null, $max: null) {
    @if $min and $max {
      @media (min-width: #{$min}) and (max-width: #{$max}) {
        @content;
      }
    } @else if $min {
      @media (min-width: #{$min}) {
        @content;
      }
    } @else if $max {
      @media (max-width: #{$max}) {
        @content;
      }
    } @else {
      @content;
    }
  }

  .card {
    background: beige;
    border: 1px solid #9e9b9b;
    padding: 1rem;
    width: 100%;
    text-align: center;
    border-radius: 0.5rem;
    @include media($max: 768px) {
      width: 40%;
      margin: auto;
    }
  }
}

// 1.3 Múltiplos argumentos
#ex3 {
  .demo-area {
    display: flex;
    gap: 1rem;
  }

  @mixin make-card(
    $color,
    $background-color,
    $border-color,
    $background-color-hover,
    $border-color-hover,
    $shadows...
  ) {
    width: 100px;
    padding: 1rem;
    color: $color;
    text-align: center;
    box-shadow: $shadows;
    border-radius: 0.5rem;
    background: $background-color;
    border: 1px solid $border-color;

    &:hover,
    &:focus {
      background-color: $background-color-hover;
      border-color: $border-color-hover;
    }
  }

  .card-1 {
    @include make-card(
      #ffffff,
      #66314d,
      #ededed,
      #ba0060,
      #dbdbdb,
      rgba(0, 0, 0, 0.381) 0px 15px 25px,
      rgba(0, 0, 0, 0.05) 0px 5px 10px
    );
  }

  .card-2 {
    @include make-card(
      #ffffff,
      #67c272,
      #ededed,
      #517d44,
      #dbdbdb,
      rgba(240, 46, 170, 0.4) 5px 5px,
      rgba(240, 46, 170, 0.3) 10px 10px,
      rgba(240, 46, 170, 0.2) 15px 15px,
      rgba(240, 46, 170, 0.1) 20px 20px,
      rgba(240, 46, 170, 0.05) 25px 25px
    );
  }

  @mixin make-card2($options) {
    color: map-get($options, color);
    background-color: map-get($options, background-color);
    border: 1px solid map-get($options, border-color);
    width: 100px;
    padding: 1rem;
    text-align: center;
    border-radius: 0.5rem;
    box-shadow: map-get($options, shadows);

    &:hover,
    &:focus {
      background-color: map-get($options, background-color-hover);
      border-color: map-get($options, border-color-hover);
    }
  }

  $default-card: (
    color: #000000,
    background-color: #d3d3d3,
    border-color: #666666,
    background-color-hover: #e6e6e6,
    border-color-hover: #888888,
    shadows: (
      rgba(0, 0, 0, 0.381) 0px 15px 25px,
      rgba(0, 0, 0, 0.05) 0px 5px 10px,
    ),
  );

  .card-3 {
    @include make-card2($default-card);
  }
}

// 1.4 Propriedade
#ex4 {
  @mixin transform($t) {
    -webkit-transform: $t;
    -ms-transform: $t;
    transform: $t;
  }

  .moving {
    color: white;
    background-color: purple;
    padding: 1.5rem;
    border-radius: 0.5rem;
    width: 100px;
    cursor: grab;
    text-align: center;
    margin: 1rem auto;
    @include transform(translateY(0));
    &:hover {
      @include transform(translateX(100px));
    }
  }
}

// 1.5 Catálogo de tamanhos
#ex5 {
  $font-sizes: (
    sm: 10px,
    md: 12px,
    lg: 14px,
  );

  @mixin text-size($key) {
    $val: map-get($font-sizes, $key);
    @if $val == null {
      @error "Tamanho `#{$key}` inválido.";
    }
    font-size: $val;
  }

  .text-sm {
    @include text-size(sm);
  }
  .text-md {
    @include text-size(md);
  }
  .text-lg {
    @include text-size(lg);
  }
}

// 2. Funções
#ex6 {
  .demo-area {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  @function shadow($shadow-color: black) {
    @return $shadow-color 0px 5px 5px;
  }

  .card-6 {
    width: max-content;
    padding: 1rem;
    box-shadow: shadow();
  }

  .card-7 {
    width: max-content;
    padding: 1rem;
    box-shadow: shadow(blue);
  }

  $themes: (
    primary: #1e90ff,
    danger: #dc3545,
    success: #28a745,
  );

  @function theme-color($name, $opacity: 1) {
    $color: map-get($themes, $name);
    @return rgba($color, $opacity);
  }

  .btn-primary {
    border-radius: 0.5rem;
    padding: 0.5rem 1rem;
    font-weight: 500;
    align-self: flex-start;
    background: theme-color(primary);
  }

  .btn-primary:hover {
    background: theme-color(primary, 0.8);
  }

  @function to-rem($px, $base: 16) {
    @return math.div($px, $base) * 1rem;
  }

  .text-sm {
    margin: 0;
    font-size: to-rem(10);
  }

  .text-md {
    margin: 0;
    font-size: to-rem(14, 12);
  }
}

// 3. @EXTEND - Placeholders (%)
#ex7 {
  %alert-base {
    padding: 1rem;
    border-radius: 0.5rem;
    font-weight: 600;
    margin: 1rem 0;
    color: white;
  }

  .alert-warning {
    @extend %alert-base;
    background: gold;
  }

  .alert-error {
    @extend %alert-base;
    background: crimson;
  }

  // %placeholder + @extend -> reutilizar código comum.
  // @mixin -> quando precisar de customização ou lógica.
}

// 4. @USE
#ex8 {
  $radius: 0.5rem;

  .demo-area {
    padding: s.$padding;
    border-radius: $radius;
    background-color: s.$new-color;
  }

  .btn-default {
    @include s.btn-default();
  }
}
